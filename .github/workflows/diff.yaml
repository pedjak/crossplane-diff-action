on:
  pull_request:
    branches: [main]

name: Crossplane Dynamic Diff

jobs:
  pr:
    name: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all 
      - name: Check out current commit
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v4
      - name: Install yq
        run: |
          sudo add-apt-repository ppa:rmescandon/yq
          sudo apt-get update
          sudo apt-get install yq
      - name: Install Crossplane CLI
        run: go install github.com/crossplane/crossplane/cmd/crank@latest

      # Discover YAML files and their annotations
      - name: Discover YAML files
        run: |
          EXAMPLES_PATH="examples"
          YAML_FILES=($(find $EXAMPLES_PATH -type f -name '*.yaml'))
          INPUT_FILES=""
          for file in "${YAML_FILES[@]}"; do
            COMPOSITION=$(yq eval '.metadata.annotations."crossplane.render.composition"' $file)
            FUNCTION=$(yq eval '.metadata.annotations."crossplane.render.function"' $file)
            INPUT_FILES+="$file,$COMPOSITION,$FUNCTION "
          done
          echo "INPUT_FILES=${INPUT_FILES}" >> $GITHUB_ENV

      # Run a dynamic job for each input file
      - name: Run Dynamic Jobs
        run: |
          IFS=' ' read -ra INPUT_FILES <<< "${{ env.INPUT_FILES }}"
          for files in "${INPUT_FILES[@]}"; do
            IFS=',' read -ra FILE_ARRAY <<< "$files"
            FILE="${FILE_ARRAY[0]}"
            COMPOSITION="${FILE_ARRAY[1]}"
            FUNCTION="${FILE_ARRAY[2]}"
            crank beta render $FILE $COMPOSITION $FUNCTION >> diff-${FILE//\//-}.yaml
          done

      # Store outputs as artifacts
      - name: Store outputs
        uses: actions/upload-artifact@v3
        with:
          name: diff-pr-${{ github.sha }}
          path: diff-*.yaml

  main:
    name: diff
    needs: [pr]
    runs-on: ubuntu-latest
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      # Check out the current branch (main or PR branch)
      - name: Check out branch
        uses: actions/checkout@v2

      # Download artifacts from the dynamic job
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: diff-pr-${{ github.sha }}

      # Run a dynamic job for each input file
      - name: Run Dynamic Jobs
        run: |
          INPUT_FILES=${{ env.INPUT_FILES }}
          for files in "${INPUT_FILES[@]}"; do
            IFS=',' read -ra FILE_ARRAY <<< "$files"
            FILE="${FILE_ARRAY[0]}"
            COMPOSITION="${FILE_ARRAY[1]}"
            FUNCTION="${FILE_ARRAY[2]}"
            crank beta render $FILE $COMPOSITION $FUNCTION >> diff-${FILE//\//-}.yaml
          done

      # Store outputs as artifacts
      - name: Store outputs
        uses: actions/upload-artifact@v2
        with:
          name: diff-main-${{ github.sha }}
          path: diff-*.yaml

      # Diff the outputs between PR and main
      - name: Diff
        id: diff_rev
        run: |
          for files in "${INPUT_FILES[@]}"; do
            IFS=',' read -ra FILE_ARRAY <<< "$files"
            for file in "${FILE_ARRAY[@]}"; do
              DELTA=$(diff -u diff-main-${file//\//-}.yaml diff-pr-${file//\//-}.yaml || true)
              echo "DELTA_${file//\//-}<<EOF" >> $GITHUB_ENV
              echo "$DELTA" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            done
          done

      # Auto comment with diffs
      - name: Generate Comment
        id: generate_comment
        run: |
          echo "ðŸ‘‹ @${{ github.event.pull_request.user.login }}"
          echo "This is the code diff:"
          
          # Loop through input files and include diffs for each file
          IFS=',' read -ra FILES <<< "${{ steps.diff_rev.outputs.INPUT_FILES }}"
          for file in "${FILES[@]}"; do
            ENV_VAR_NAME="DELTA_$(echo $file | tr '/' '_')"
            eval "echo \"\$\{{ env.${ENV_VAR_NAME} }}\""
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto Comment
        uses: wow-actions/auto-comment@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          pullRequestSynchronize: ${{ steps.generate_comment.outputs }}
